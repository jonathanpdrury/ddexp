Hey Julien,

How was Copenhagen? Who prevailed in the bowling and shuffleboard?

I'm writing because I have been (still) working on the latitudinal gradient in competition project. I've finished up one set of analyses, and I'm now turning my attention to the next (and final!) set of model fits, for which I will be using the fit_t_general script you've developed. I am very nearly ready to fit the models, but I have a few questions for you before I get going:

(1) The current version of the script incorporates the measurement error that is known, in addition to the measurement error that is unknown. To be able to compare the likelihoods for these models (DD single slope and DD two-slope models) with both types of measurement errors to the likelihoods of BM and OU models in mvMORPH, I think I'd need to also include measurement errors in those models (i.e., BM1, BMM, OU1, and OUM from mvMORPH). Would it be a huge hassle to update these scripts to incorporate measurement error as in the most recent fit_t_general script?

(2) I've run into some troubles with the optimisation for the fit_t_general_options.R script, and I'm a bit unsure what's going on. The two main issues are: (a) I rarely get convergence using L-BGFS-B or Nelder-Mead approaches, meaning I need to use the BB version, which is much much slower, and (b) sometimes, even when I get convergence using the BB method, I find that the likelihood is lower than the ML from the old RPANDA approach (which does converge using Nelder-Mead). I can't for the life of me figure out what is going on--I don't think it has anything to do with starting values, but I could be wrong of course. I find that this is particularly problematic for DDlin models, which pass the sigma value, rather than the log-transformed sigma value, to the optimiser--perhaps that is the problem? I tried to change this (i.e., to pass the log-transformed sigma value to the optimiser for the linear DD model) and it didn't do anything, but perhaps I did it incorrectly. I've attached a script with a reproducible example of this (using the old version without measurement error, to make it directly comparable to the RPANDA versions).

(3) Finally--and this last point is very low priority--I've been trying to make a simple wrapper script that will implement all of the different versions of the models that I've been playing with. However, all of my attempts to do so have been thwarted, and I get an error that reads: "Error: $ operator is invalid for atomic vectors". Yet when I run the code in the wrapper script manually, everything works fine. Digging into this, I think that it is because the "fun" that is passed to "fit_t_general" calls two objects that are defined in the console but not passed directly to fit_t_general (see attached script for more details). I've tried just passing these objects through to fit_t_general, but that doesn't seem to have fixed things. Do you have any thoughts on how to streamline this? Again, this isn't particularly important at the moment, though I think it would be good to have a simplified wrapper script for end users at some point.